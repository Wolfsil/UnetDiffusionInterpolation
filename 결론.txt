학습1: 실용하기엔 노이즈가 너무심함. 네트워크 깊이를 수정하거나 딴 방법이 필요
-3d unet, 참조이미지, 노이지이미지, 시그널레이트 조합. 이미지를 직접 생성
-이미지 정규화(0~1)

학습2: loss, accuracy가 수렴하지 않음. 학습을 행하기엔 적절한 데이터형태가 아닌듯
-3d unet, 노이지이미지, 시그널레이트 조합. 노이즈를 x - y 로 주는 방식
-이미지 정규화(0~1)
-원인: 러닝레이트를 너무 크게했던 문제

학습3
-2d unet, 참조이미지, 노이지이미지, 시그널레이트 조합. 이미지를 직접 생성
-참조이미지 3장, 노이즈 2장(이미지 채널 컨케트네이트)
-이미지 비정규화(0~255)-> 정규화(학습이 튀는 경향이 줄어듦)
-원인: 컨케트네이트 그냥하면 정확도가 약해지는듯

학습4
-2d unet, 참조이미지, 노이지이미지, 시그널레이트 조합. 이미지를 직접 생성
-참조이미지 2장, 노이즈 1장(이미지 채널 컨케트네이트)
-원인: 컨케트네이트 그냥하면 정확도가 약해지는듯

학습5
-일반적 2d unet
-참조이미지 2장, 노이즈 1장(이미지 채널 컨케트네이트)
-원인: 컨케트네이트 그냥하면 정확도가 약해지는듯

학습6
-3d unet. 더블 unet을 생성
-생성->보정 과정을 거칠줄 알았지만 안됨.
-아무래도 일반적 unet으론 어림없을듯함


학습7
- 2d unet. 내가 직접 설계한 스테어 넷(사다리모양 합성 unet)을 사용해봄
- 이미지 직접 생성방식
- 백본을 unet으로 하는 버전과 ae로 하는 버전이 있지만 unet부터 실험하면 ae도 실험되므로 unet으로 실험
- 생성물의 노이즈는 없고, 색감이 이상하지만 중간이미지를 어느정도 잘 생성하는 편
- 다만 상용은 할 정도가 아님. 
- 하지만 일반 concatenate unet보다 좋은 이미지를 만들어내는건 자랑스러움


학습8
- 2d unet. 내가 직접 설계한 스테어 넷(사다리모양 합성 unet)을 사용해봄
- 노이즈 뺴는 방식(입력이미지 두개, 백본에 연결되는 노이즈 한개)
- 이 역시 시원치 않음

학습9
- 2d unet. 내가 직접 설계한 y 넷(y 합성 unet)을 사용해봄
- 전통적인 워핑알고리즘을 사용해봄

학습10
- 이미지 사이즈를 다운 샘플링해서 unet 각층에 추가
- 실패

학습 11
-워핑 알고리즘으로 귀환. 모든 블록이 워핑을 진행
-실패

학습 12
-slomo 알고리즘을 참고
-실패
-이해하지 못한 부분에서 중요한게 섞여 있었나봄

학습 13
-일반적 unet이지만, conv만을이용한 임베딩을 생성 후 결합
-임베딩을 이렇게 넣는건 좋지 않나봄

학습 14
-일반적 unet이지만, conv로 순차적인 축소, dense로 마무리한 임베딩을 결합
-



아이디어 영역 다른 방법

-2d unet, 노이지이미지, 시그널레이트 조합. 이미지를 직접 생성. 노이즈를 x - y 로 주는 방식
-직관적으로 분석해보니 노이즈를 고정하는 방식이면 시그널레이트가 뭐든 간에 출력이 같으므로 디퓨전의 장점을 없애버림

-3d unet, 참조이미지, 노이지이미지, 시그널레이트 조합. 노이즈를 x - y 로 주는 방식
(2d unet과 다를 바 없을 듯 하므로 드랍)
